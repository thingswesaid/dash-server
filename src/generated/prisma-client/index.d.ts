// Code generated by Prisma (prisma@1.34.0). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  order: (where?: OrderWhereInput) => Promise<boolean>;
  product: (where?: ProductWhereInput) => Promise<boolean>;
  promoCode: (where?: PromoCodeWhereInput) => Promise<boolean>;
  promoVideo: (where?: PromoVideoWhereInput) => Promise<boolean>;
  quote: (where?: QuoteWhereInput) => Promise<boolean>;
  sitePromo: (where?: SitePromoWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
  video: (where?: VideoWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  order: (where: OrderWhereUniqueInput) => OrderNullablePromise;
  orders: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Order>;
  ordersConnection: (args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => OrderConnectionPromise;
  product: (where: ProductWhereUniqueInput) => ProductNullablePromise;
  products: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Product>;
  productsConnection: (args?: {
    where?: ProductWhereInput;
    orderBy?: ProductOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProductConnectionPromise;
  promoCode: (where: PromoCodeWhereUniqueInput) => PromoCodeNullablePromise;
  promoCodes: (args?: {
    where?: PromoCodeWhereInput;
    orderBy?: PromoCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PromoCode>;
  promoCodesConnection: (args?: {
    where?: PromoCodeWhereInput;
    orderBy?: PromoCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PromoCodeConnectionPromise;
  promoVideo: (where: PromoVideoWhereUniqueInput) => PromoVideoNullablePromise;
  promoVideos: (args?: {
    where?: PromoVideoWhereInput;
    orderBy?: PromoVideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<PromoVideo>;
  promoVideosConnection: (args?: {
    where?: PromoVideoWhereInput;
    orderBy?: PromoVideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PromoVideoConnectionPromise;
  quote: (where: QuoteWhereUniqueInput) => QuoteNullablePromise;
  quotes: (args?: {
    where?: QuoteWhereInput;
    orderBy?: QuoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Quote>;
  quotesConnection: (args?: {
    where?: QuoteWhereInput;
    orderBy?: QuoteOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => QuoteConnectionPromise;
  sitePromo: (where: SitePromoWhereUniqueInput) => SitePromoNullablePromise;
  sitePromoes: (args?: {
    where?: SitePromoWhereInput;
    orderBy?: SitePromoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<SitePromo>;
  sitePromoesConnection: (args?: {
    where?: SitePromoWhereInput;
    orderBy?: SitePromoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => SitePromoConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  video: (where: VideoWhereUniqueInput) => VideoNullablePromise;
  videos: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Video>;
  videosConnection: (args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => VideoConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createOrder: (data: OrderCreateInput) => OrderPromise;
  updateOrder: (args: {
    data: OrderUpdateInput;
    where: OrderWhereUniqueInput;
  }) => OrderPromise;
  updateManyOrders: (args: {
    data: OrderUpdateManyMutationInput;
    where?: OrderWhereInput;
  }) => BatchPayloadPromise;
  upsertOrder: (args: {
    where: OrderWhereUniqueInput;
    create: OrderCreateInput;
    update: OrderUpdateInput;
  }) => OrderPromise;
  deleteOrder: (where: OrderWhereUniqueInput) => OrderPromise;
  deleteManyOrders: (where?: OrderWhereInput) => BatchPayloadPromise;
  createProduct: (data: ProductCreateInput) => ProductPromise;
  updateProduct: (args: {
    data: ProductUpdateInput;
    where: ProductWhereUniqueInput;
  }) => ProductPromise;
  updateManyProducts: (args: {
    data: ProductUpdateManyMutationInput;
    where?: ProductWhereInput;
  }) => BatchPayloadPromise;
  upsertProduct: (args: {
    where: ProductWhereUniqueInput;
    create: ProductCreateInput;
    update: ProductUpdateInput;
  }) => ProductPromise;
  deleteProduct: (where: ProductWhereUniqueInput) => ProductPromise;
  deleteManyProducts: (where?: ProductWhereInput) => BatchPayloadPromise;
  createPromoCode: (data: PromoCodeCreateInput) => PromoCodePromise;
  updatePromoCode: (args: {
    data: PromoCodeUpdateInput;
    where: PromoCodeWhereUniqueInput;
  }) => PromoCodePromise;
  updateManyPromoCodes: (args: {
    data: PromoCodeUpdateManyMutationInput;
    where?: PromoCodeWhereInput;
  }) => BatchPayloadPromise;
  upsertPromoCode: (args: {
    where: PromoCodeWhereUniqueInput;
    create: PromoCodeCreateInput;
    update: PromoCodeUpdateInput;
  }) => PromoCodePromise;
  deletePromoCode: (where: PromoCodeWhereUniqueInput) => PromoCodePromise;
  deleteManyPromoCodes: (where?: PromoCodeWhereInput) => BatchPayloadPromise;
  createPromoVideo: (data: PromoVideoCreateInput) => PromoVideoPromise;
  updatePromoVideo: (args: {
    data: PromoVideoUpdateInput;
    where: PromoVideoWhereUniqueInput;
  }) => PromoVideoPromise;
  updateManyPromoVideos: (args: {
    data: PromoVideoUpdateManyMutationInput;
    where?: PromoVideoWhereInput;
  }) => BatchPayloadPromise;
  upsertPromoVideo: (args: {
    where: PromoVideoWhereUniqueInput;
    create: PromoVideoCreateInput;
    update: PromoVideoUpdateInput;
  }) => PromoVideoPromise;
  deletePromoVideo: (where: PromoVideoWhereUniqueInput) => PromoVideoPromise;
  deleteManyPromoVideos: (where?: PromoVideoWhereInput) => BatchPayloadPromise;
  createQuote: (data: QuoteCreateInput) => QuotePromise;
  updateQuote: (args: {
    data: QuoteUpdateInput;
    where: QuoteWhereUniqueInput;
  }) => QuotePromise;
  updateManyQuotes: (args: {
    data: QuoteUpdateManyMutationInput;
    where?: QuoteWhereInput;
  }) => BatchPayloadPromise;
  upsertQuote: (args: {
    where: QuoteWhereUniqueInput;
    create: QuoteCreateInput;
    update: QuoteUpdateInput;
  }) => QuotePromise;
  deleteQuote: (where: QuoteWhereUniqueInput) => QuotePromise;
  deleteManyQuotes: (where?: QuoteWhereInput) => BatchPayloadPromise;
  createSitePromo: (data: SitePromoCreateInput) => SitePromoPromise;
  updateSitePromo: (args: {
    data: SitePromoUpdateInput;
    where: SitePromoWhereUniqueInput;
  }) => SitePromoPromise;
  updateManySitePromoes: (args: {
    data: SitePromoUpdateManyMutationInput;
    where?: SitePromoWhereInput;
  }) => BatchPayloadPromise;
  upsertSitePromo: (args: {
    where: SitePromoWhereUniqueInput;
    create: SitePromoCreateInput;
    update: SitePromoUpdateInput;
  }) => SitePromoPromise;
  deleteSitePromo: (where: SitePromoWhereUniqueInput) => SitePromoPromise;
  deleteManySitePromoes: (where?: SitePromoWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;
  createVideo: (data: VideoCreateInput) => VideoPromise;
  updateVideo: (args: {
    data: VideoUpdateInput;
    where: VideoWhereUniqueInput;
  }) => VideoPromise;
  updateManyVideos: (args: {
    data: VideoUpdateManyMutationInput;
    where?: VideoWhereInput;
  }) => BatchPayloadPromise;
  upsertVideo: (args: {
    where: VideoWhereUniqueInput;
    create: VideoCreateInput;
    update: VideoUpdateInput;
  }) => VideoPromise;
  deleteVideo: (where: VideoWhereUniqueInput) => VideoPromise;
  deleteManyVideos: (where?: VideoWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  order: (
    where?: OrderSubscriptionWhereInput
  ) => OrderSubscriptionPayloadSubscription;
  product: (
    where?: ProductSubscriptionWhereInput
  ) => ProductSubscriptionPayloadSubscription;
  promoCode: (
    where?: PromoCodeSubscriptionWhereInput
  ) => PromoCodeSubscriptionPayloadSubscription;
  promoVideo: (
    where?: PromoVideoSubscriptionWhereInput
  ) => PromoVideoSubscriptionPayloadSubscription;
  quote: (
    where?: QuoteSubscriptionWhereInput
  ) => QuoteSubscriptionPayloadSubscription;
  sitePromo: (
    where?: SitePromoSubscriptionWhereInput
  ) => SitePromoSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
  video: (
    where?: VideoSubscriptionWhereInput
  ) => VideoSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type VideoType = "ZODIAC" | "PICKACARD";

export type VideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "keywords_ASC"
  | "keywords_DESC"
  | "title_ASC"
  | "title_DESC"
  | "link_ASC"
  | "link_DESC"
  | "preview_ASC"
  | "preview_DESC"
  | "image_ASC"
  | "image_DESC"
  | "placeholder_ASC"
  | "placeholder_DESC"
  | "imageVertical_ASC"
  | "imageVertical_DESC"
  | "placeholderVertical_ASC"
  | "placeholderVertical_DESC"
  | "published_ASC"
  | "published_DESC"
  | "price_ASC"
  | "price_DESC"
  | "start_ASC"
  | "start_DESC"
  | "type_ASC"
  | "type_DESC"
  | "familyId_ASC"
  | "familyId_DESC"
  | "suggest_ASC"
  | "suggest_DESC";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "password_ASC"
  | "password_DESC"
  | "phone_ASC"
  | "phone_DESC"
  | "active_ASC"
  | "active_DESC"
  | "subscribePromo_ASC"
  | "subscribePromo_DESC"
  | "subscribeEarlyAccess_ASC"
  | "subscribeEarlyAccess_DESC"
  | "subscribeNews_ASC"
  | "subscribeNews_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type PromoCodeOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "code_ASC"
  | "code_DESC"
  | "valid_ASC"
  | "valid_DESC"
  | "type_ASC"
  | "type_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type OrderOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "paymentId_ASC"
  | "paymentId_DESC"
  | "paymentEmail_ASC"
  | "paymentEmail_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC";

export type ProductOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "link_ASC"
  | "link_DESC"
  | "name_ASC"
  | "name_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "placeholder_ASC"
  | "placeholder_DESC"
  | "type_ASC"
  | "type_DESC";

export type PromoVideoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "link_ASC"
  | "link_DESC"
  | "title_ASC"
  | "title_DESC"
  | "description_ASC"
  | "description_DESC"
  | "image_ASC"
  | "image_DESC"
  | "placeholder_ASC"
  | "placeholder_DESC"
  | "familyId_ASC"
  | "familyId_DESC"
  | "banner_ASC"
  | "banner_DESC"
  | "bannerMobile_ASC"
  | "bannerMobile_DESC"
  | "type_ASC"
  | "type_DESC";

export type QuoteOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "text_ASC"
  | "text_DESC"
  | "linkTo_ASC"
  | "linkTo_DESC";

export type PromoOffer = "BUY1GET1" | "DISCOUNT";

export type SitePromoOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "type_ASC"
  | "type_DESC"
  | "promoOffer_ASC"
  | "promoOffer_DESC"
  | "startDate_ASC"
  | "startDate_DESC"
  | "endDate_ASC"
  | "endDate_DESC"
  | "title_ASC"
  | "title_DESC"
  | "subtitle_ASC"
  | "subtitle_DESC"
  | "description_ASC"
  | "description_DESC"
  | "newPrice_ASC"
  | "newPrice_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type OrderWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  paymentId?: Maybe<String>;
}>;

export interface VideoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  keywords?: Maybe<String>;
  keywords_not?: Maybe<String>;
  keywords_in?: Maybe<String[] | String>;
  keywords_not_in?: Maybe<String[] | String>;
  keywords_lt?: Maybe<String>;
  keywords_lte?: Maybe<String>;
  keywords_gt?: Maybe<String>;
  keywords_gte?: Maybe<String>;
  keywords_contains?: Maybe<String>;
  keywords_not_contains?: Maybe<String>;
  keywords_starts_with?: Maybe<String>;
  keywords_not_starts_with?: Maybe<String>;
  keywords_ends_with?: Maybe<String>;
  keywords_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  preview?: Maybe<String>;
  preview_not?: Maybe<String>;
  preview_in?: Maybe<String[] | String>;
  preview_not_in?: Maybe<String[] | String>;
  preview_lt?: Maybe<String>;
  preview_lte?: Maybe<String>;
  preview_gt?: Maybe<String>;
  preview_gte?: Maybe<String>;
  preview_contains?: Maybe<String>;
  preview_not_contains?: Maybe<String>;
  preview_starts_with?: Maybe<String>;
  preview_not_starts_with?: Maybe<String>;
  preview_ends_with?: Maybe<String>;
  preview_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  placeholder?: Maybe<String>;
  placeholder_not?: Maybe<String>;
  placeholder_in?: Maybe<String[] | String>;
  placeholder_not_in?: Maybe<String[] | String>;
  placeholder_lt?: Maybe<String>;
  placeholder_lte?: Maybe<String>;
  placeholder_gt?: Maybe<String>;
  placeholder_gte?: Maybe<String>;
  placeholder_contains?: Maybe<String>;
  placeholder_not_contains?: Maybe<String>;
  placeholder_starts_with?: Maybe<String>;
  placeholder_not_starts_with?: Maybe<String>;
  placeholder_ends_with?: Maybe<String>;
  placeholder_not_ends_with?: Maybe<String>;
  imageVertical?: Maybe<String>;
  imageVertical_not?: Maybe<String>;
  imageVertical_in?: Maybe<String[] | String>;
  imageVertical_not_in?: Maybe<String[] | String>;
  imageVertical_lt?: Maybe<String>;
  imageVertical_lte?: Maybe<String>;
  imageVertical_gt?: Maybe<String>;
  imageVertical_gte?: Maybe<String>;
  imageVertical_contains?: Maybe<String>;
  imageVertical_not_contains?: Maybe<String>;
  imageVertical_starts_with?: Maybe<String>;
  imageVertical_not_starts_with?: Maybe<String>;
  imageVertical_ends_with?: Maybe<String>;
  imageVertical_not_ends_with?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  placeholderVertical_not?: Maybe<String>;
  placeholderVertical_in?: Maybe<String[] | String>;
  placeholderVertical_not_in?: Maybe<String[] | String>;
  placeholderVertical_lt?: Maybe<String>;
  placeholderVertical_lte?: Maybe<String>;
  placeholderVertical_gt?: Maybe<String>;
  placeholderVertical_gte?: Maybe<String>;
  placeholderVertical_contains?: Maybe<String>;
  placeholderVertical_not_contains?: Maybe<String>;
  placeholderVertical_starts_with?: Maybe<String>;
  placeholderVertical_not_starts_with?: Maybe<String>;
  placeholderVertical_ends_with?: Maybe<String>;
  placeholderVertical_not_ends_with?: Maybe<String>;
  users_every?: Maybe<UserWhereInput>;
  users_some?: Maybe<UserWhereInput>;
  users_none?: Maybe<UserWhereInput>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  start?: Maybe<Int>;
  start_not?: Maybe<Int>;
  start_in?: Maybe<Int[] | Int>;
  start_not_in?: Maybe<Int[] | Int>;
  start_lt?: Maybe<Int>;
  start_lte?: Maybe<Int>;
  start_gt?: Maybe<Int>;
  start_gte?: Maybe<Int>;
  type?: Maybe<VideoType>;
  type_not?: Maybe<VideoType>;
  type_in?: Maybe<VideoType[] | VideoType>;
  type_not_in?: Maybe<VideoType[] | VideoType>;
  familyId?: Maybe<String>;
  familyId_not?: Maybe<String>;
  familyId_in?: Maybe<String[] | String>;
  familyId_not_in?: Maybe<String[] | String>;
  familyId_lt?: Maybe<String>;
  familyId_lte?: Maybe<String>;
  familyId_gt?: Maybe<String>;
  familyId_gte?: Maybe<String>;
  familyId_contains?: Maybe<String>;
  familyId_not_contains?: Maybe<String>;
  familyId_starts_with?: Maybe<String>;
  familyId_not_starts_with?: Maybe<String>;
  familyId_ends_with?: Maybe<String>;
  familyId_not_ends_with?: Maybe<String>;
  promoVideo?: Maybe<PromoVideoWhereInput>;
  suggest?: Maybe<Boolean>;
  suggest_not?: Maybe<Boolean>;
  AND?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  OR?: Maybe<VideoWhereInput[] | VideoWhereInput>;
  NOT?: Maybe<VideoWhereInput[] | VideoWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  videos_every?: Maybe<VideoWhereInput>;
  videos_some?: Maybe<VideoWhereInput>;
  videos_none?: Maybe<VideoWhereInput>;
  promoCodes_every?: Maybe<PromoCodeWhereInput>;
  promoCodes_some?: Maybe<PromoCodeWhereInput>;
  promoCodes_none?: Maybe<PromoCodeWhereInput>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  orders_every?: Maybe<OrderWhereInput>;
  orders_some?: Maybe<OrderWhereInput>;
  orders_none?: Maybe<OrderWhereInput>;
  subscribePromo?: Maybe<Boolean>;
  subscribePromo_not?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeEarlyAccess_not?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
  subscribeNews_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface PromoCodeWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  valid?: Maybe<Boolean>;
  valid_not?: Maybe<Boolean>;
  type?: Maybe<VideoType>;
  type_not?: Maybe<VideoType>;
  type_in?: Maybe<VideoType[] | VideoType>;
  type_not_in?: Maybe<VideoType[] | VideoType>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  video?: Maybe<VideoWhereInput>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PromoCodeWhereInput[] | PromoCodeWhereInput>;
  OR?: Maybe<PromoCodeWhereInput[] | PromoCodeWhereInput>;
  NOT?: Maybe<PromoCodeWhereInput[] | PromoCodeWhereInput>;
}

export interface OrderWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  paymentId?: Maybe<String>;
  paymentId_not?: Maybe<String>;
  paymentId_in?: Maybe<String[] | String>;
  paymentId_not_in?: Maybe<String[] | String>;
  paymentId_lt?: Maybe<String>;
  paymentId_lte?: Maybe<String>;
  paymentId_gt?: Maybe<String>;
  paymentId_gte?: Maybe<String>;
  paymentId_contains?: Maybe<String>;
  paymentId_not_contains?: Maybe<String>;
  paymentId_starts_with?: Maybe<String>;
  paymentId_not_starts_with?: Maybe<String>;
  paymentId_ends_with?: Maybe<String>;
  paymentId_not_ends_with?: Maybe<String>;
  user?: Maybe<UserWhereInput>;
  video?: Maybe<VideoWhereInput>;
  paymentEmail?: Maybe<String>;
  paymentEmail_not?: Maybe<String>;
  paymentEmail_in?: Maybe<String[] | String>;
  paymentEmail_not_in?: Maybe<String[] | String>;
  paymentEmail_lt?: Maybe<String>;
  paymentEmail_lte?: Maybe<String>;
  paymentEmail_gt?: Maybe<String>;
  paymentEmail_gte?: Maybe<String>;
  paymentEmail_contains?: Maybe<String>;
  paymentEmail_not_contains?: Maybe<String>;
  paymentEmail_starts_with?: Maybe<String>;
  paymentEmail_not_starts_with?: Maybe<String>;
  paymentEmail_ends_with?: Maybe<String>;
  paymentEmail_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  OR?: Maybe<OrderWhereInput[] | OrderWhereInput>;
  NOT?: Maybe<OrderWhereInput[] | OrderWhereInput>;
}

export interface PromoVideoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  placeholder?: Maybe<String>;
  placeholder_not?: Maybe<String>;
  placeholder_in?: Maybe<String[] | String>;
  placeholder_not_in?: Maybe<String[] | String>;
  placeholder_lt?: Maybe<String>;
  placeholder_lte?: Maybe<String>;
  placeholder_gt?: Maybe<String>;
  placeholder_gte?: Maybe<String>;
  placeholder_contains?: Maybe<String>;
  placeholder_not_contains?: Maybe<String>;
  placeholder_starts_with?: Maybe<String>;
  placeholder_not_starts_with?: Maybe<String>;
  placeholder_ends_with?: Maybe<String>;
  placeholder_not_ends_with?: Maybe<String>;
  familyId?: Maybe<String>;
  familyId_not?: Maybe<String>;
  familyId_in?: Maybe<String[] | String>;
  familyId_not_in?: Maybe<String[] | String>;
  familyId_lt?: Maybe<String>;
  familyId_lte?: Maybe<String>;
  familyId_gt?: Maybe<String>;
  familyId_gte?: Maybe<String>;
  familyId_contains?: Maybe<String>;
  familyId_not_contains?: Maybe<String>;
  familyId_starts_with?: Maybe<String>;
  familyId_not_starts_with?: Maybe<String>;
  familyId_ends_with?: Maybe<String>;
  familyId_not_ends_with?: Maybe<String>;
  banner?: Maybe<String>;
  banner_not?: Maybe<String>;
  banner_in?: Maybe<String[] | String>;
  banner_not_in?: Maybe<String[] | String>;
  banner_lt?: Maybe<String>;
  banner_lte?: Maybe<String>;
  banner_gt?: Maybe<String>;
  banner_gte?: Maybe<String>;
  banner_contains?: Maybe<String>;
  banner_not_contains?: Maybe<String>;
  banner_starts_with?: Maybe<String>;
  banner_not_starts_with?: Maybe<String>;
  banner_ends_with?: Maybe<String>;
  banner_not_ends_with?: Maybe<String>;
  bannerMobile?: Maybe<String>;
  bannerMobile_not?: Maybe<String>;
  bannerMobile_in?: Maybe<String[] | String>;
  bannerMobile_not_in?: Maybe<String[] | String>;
  bannerMobile_lt?: Maybe<String>;
  bannerMobile_lte?: Maybe<String>;
  bannerMobile_gt?: Maybe<String>;
  bannerMobile_gte?: Maybe<String>;
  bannerMobile_contains?: Maybe<String>;
  bannerMobile_not_contains?: Maybe<String>;
  bannerMobile_starts_with?: Maybe<String>;
  bannerMobile_not_starts_with?: Maybe<String>;
  bannerMobile_ends_with?: Maybe<String>;
  bannerMobile_not_ends_with?: Maybe<String>;
  type?: Maybe<VideoType>;
  type_not?: Maybe<VideoType>;
  type_in?: Maybe<VideoType[] | VideoType>;
  type_not_in?: Maybe<VideoType[] | VideoType>;
  video?: Maybe<VideoWhereInput>;
  AND?: Maybe<PromoVideoWhereInput[] | PromoVideoWhereInput>;
  OR?: Maybe<PromoVideoWhereInput[] | PromoVideoWhereInput>;
  NOT?: Maybe<PromoVideoWhereInput[] | PromoVideoWhereInput>;
}

export type ProductWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface ProductWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  placeholder?: Maybe<String>;
  placeholder_not?: Maybe<String>;
  placeholder_in?: Maybe<String[] | String>;
  placeholder_not_in?: Maybe<String[] | String>;
  placeholder_lt?: Maybe<String>;
  placeholder_lte?: Maybe<String>;
  placeholder_gt?: Maybe<String>;
  placeholder_gte?: Maybe<String>;
  placeholder_contains?: Maybe<String>;
  placeholder_not_contains?: Maybe<String>;
  placeholder_starts_with?: Maybe<String>;
  placeholder_not_starts_with?: Maybe<String>;
  placeholder_ends_with?: Maybe<String>;
  placeholder_not_ends_with?: Maybe<String>;
  type?: Maybe<String>;
  type_not?: Maybe<String>;
  type_in?: Maybe<String[] | String>;
  type_not_in?: Maybe<String[] | String>;
  type_lt?: Maybe<String>;
  type_lte?: Maybe<String>;
  type_gt?: Maybe<String>;
  type_gte?: Maybe<String>;
  type_contains?: Maybe<String>;
  type_not_contains?: Maybe<String>;
  type_starts_with?: Maybe<String>;
  type_not_starts_with?: Maybe<String>;
  type_ends_with?: Maybe<String>;
  type_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  OR?: Maybe<ProductWhereInput[] | ProductWhereInput>;
  NOT?: Maybe<ProductWhereInput[] | ProductWhereInput>;
}

export type PromoCodeWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  code?: Maybe<String>;
}>;

export type PromoVideoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export type QuoteWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface QuoteWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  text?: Maybe<String>;
  text_not?: Maybe<String>;
  text_in?: Maybe<String[] | String>;
  text_not_in?: Maybe<String[] | String>;
  text_lt?: Maybe<String>;
  text_lte?: Maybe<String>;
  text_gt?: Maybe<String>;
  text_gte?: Maybe<String>;
  text_contains?: Maybe<String>;
  text_not_contains?: Maybe<String>;
  text_starts_with?: Maybe<String>;
  text_not_starts_with?: Maybe<String>;
  text_ends_with?: Maybe<String>;
  text_not_ends_with?: Maybe<String>;
  linkTo?: Maybe<String>;
  linkTo_not?: Maybe<String>;
  linkTo_in?: Maybe<String[] | String>;
  linkTo_not_in?: Maybe<String[] | String>;
  linkTo_lt?: Maybe<String>;
  linkTo_lte?: Maybe<String>;
  linkTo_gt?: Maybe<String>;
  linkTo_gte?: Maybe<String>;
  linkTo_contains?: Maybe<String>;
  linkTo_not_contains?: Maybe<String>;
  linkTo_starts_with?: Maybe<String>;
  linkTo_not_starts_with?: Maybe<String>;
  linkTo_ends_with?: Maybe<String>;
  linkTo_not_ends_with?: Maybe<String>;
  AND?: Maybe<QuoteWhereInput[] | QuoteWhereInput>;
  OR?: Maybe<QuoteWhereInput[] | QuoteWhereInput>;
  NOT?: Maybe<QuoteWhereInput[] | QuoteWhereInput>;
}

export type SitePromoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface SitePromoWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  type?: Maybe<VideoType>;
  type_not?: Maybe<VideoType>;
  type_in?: Maybe<VideoType[] | VideoType>;
  type_not_in?: Maybe<VideoType[] | VideoType>;
  promoOffer?: Maybe<PromoOffer>;
  promoOffer_not?: Maybe<PromoOffer>;
  promoOffer_in?: Maybe<PromoOffer[] | PromoOffer>;
  promoOffer_not_in?: Maybe<PromoOffer[] | PromoOffer>;
  startDate?: Maybe<String>;
  startDate_not?: Maybe<String>;
  startDate_in?: Maybe<String[] | String>;
  startDate_not_in?: Maybe<String[] | String>;
  startDate_lt?: Maybe<String>;
  startDate_lte?: Maybe<String>;
  startDate_gt?: Maybe<String>;
  startDate_gte?: Maybe<String>;
  startDate_contains?: Maybe<String>;
  startDate_not_contains?: Maybe<String>;
  startDate_starts_with?: Maybe<String>;
  startDate_not_starts_with?: Maybe<String>;
  startDate_ends_with?: Maybe<String>;
  startDate_not_ends_with?: Maybe<String>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  subtitle?: Maybe<String>;
  subtitle_not?: Maybe<String>;
  subtitle_in?: Maybe<String[] | String>;
  subtitle_not_in?: Maybe<String[] | String>;
  subtitle_lt?: Maybe<String>;
  subtitle_lte?: Maybe<String>;
  subtitle_gt?: Maybe<String>;
  subtitle_gte?: Maybe<String>;
  subtitle_contains?: Maybe<String>;
  subtitle_not_contains?: Maybe<String>;
  subtitle_starts_with?: Maybe<String>;
  subtitle_not_starts_with?: Maybe<String>;
  subtitle_ends_with?: Maybe<String>;
  subtitle_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  newPrice?: Maybe<Float>;
  newPrice_not?: Maybe<Float>;
  newPrice_in?: Maybe<Float[] | Float>;
  newPrice_not_in?: Maybe<Float[] | Float>;
  newPrice_lt?: Maybe<Float>;
  newPrice_lte?: Maybe<Float>;
  newPrice_gt?: Maybe<Float>;
  newPrice_gte?: Maybe<Float>;
  AND?: Maybe<SitePromoWhereInput[] | SitePromoWhereInput>;
  OR?: Maybe<SitePromoWhereInput[] | SitePromoWhereInput>;
  NOT?: Maybe<SitePromoWhereInput[] | SitePromoWhereInput>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export type VideoWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
}>;

export interface OrderCreateInput {
  paymentId: String;
  user?: Maybe<UserCreateOneWithoutOrdersInput>;
  video?: Maybe<VideoCreateOneInput>;
  paymentEmail?: Maybe<String>;
}

export interface UserCreateOneWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutOrdersInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserCreateipsInput>;
  videos?: Maybe<VideoCreateManyWithoutUsersInput>;
  promoCodes?: Maybe<PromoCodeCreateManyWithoutUserInput>;
  active?: Maybe<Boolean>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface UserCreateipsInput {
  set?: Maybe<String[] | String>;
}

export interface VideoCreateManyWithoutUsersInput {
  create?: Maybe<VideoCreateWithoutUsersInput[] | VideoCreateWithoutUsersInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
}

export interface VideoCreateWithoutUsersInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview: String;
  image: String;
  placeholder: String;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  published?: Maybe<Boolean>;
  price: Float;
  start: Int;
  type: VideoType;
  familyId?: Maybe<String>;
  promoVideo?: Maybe<PromoVideoCreateOneWithoutVideoInput>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoCreateoptionsInput>;
}

export interface PromoVideoCreateOneWithoutVideoInput {
  create?: Maybe<PromoVideoCreateWithoutVideoInput>;
  connect?: Maybe<PromoVideoWhereUniqueInput>;
}

export interface PromoVideoCreateWithoutVideoInput {
  link: String;
  title: String;
  description: String;
  image: String;
  placeholder?: Maybe<String>;
  familyId?: Maybe<String>;
  banner: String;
  bannerMobile: String;
  type: VideoType;
}

export interface VideoCreateoptionsInput {
  set?: Maybe<String[] | String>;
}

export interface PromoCodeCreateManyWithoutUserInput {
  create?: Maybe<
    PromoCodeCreateWithoutUserInput[] | PromoCodeCreateWithoutUserInput
  >;
  connect?: Maybe<PromoCodeWhereUniqueInput[] | PromoCodeWhereUniqueInput>;
}

export interface PromoCodeCreateWithoutUserInput {
  code: String;
  valid?: Maybe<Boolean>;
  type: VideoType;
  endDate?: Maybe<String>;
  video?: Maybe<VideoCreateOneInput>;
}

export interface VideoCreateOneInput {
  create?: Maybe<VideoCreateInput>;
  connect?: Maybe<VideoWhereUniqueInput>;
}

export interface VideoCreateInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview: String;
  image: String;
  placeholder: String;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutVideosInput>;
  published?: Maybe<Boolean>;
  price: Float;
  start: Int;
  type: VideoType;
  familyId?: Maybe<String>;
  promoVideo?: Maybe<PromoVideoCreateOneWithoutVideoInput>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoCreateoptionsInput>;
}

export interface UserCreateManyWithoutVideosInput {
  create?: Maybe<UserCreateWithoutVideosInput[] | UserCreateWithoutVideosInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
}

export interface UserCreateWithoutVideosInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserCreateipsInput>;
  promoCodes?: Maybe<PromoCodeCreateManyWithoutUserInput>;
  active?: Maybe<Boolean>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface OrderCreateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
}

export interface OrderCreateWithoutUserInput {
  paymentId: String;
  video?: Maybe<VideoCreateOneInput>;
  paymentEmail?: Maybe<String>;
}

export interface OrderUpdateInput {
  paymentId?: Maybe<String>;
  user?: Maybe<UserUpdateOneWithoutOrdersInput>;
  video?: Maybe<VideoUpdateOneInput>;
  paymentEmail?: Maybe<String>;
}

export interface UserUpdateOneWithoutOrdersInput {
  create?: Maybe<UserCreateWithoutOrdersInput>;
  update?: Maybe<UserUpdateWithoutOrdersDataInput>;
  upsert?: Maybe<UserUpsertWithoutOrdersInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutOrdersDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserUpdateipsInput>;
  videos?: Maybe<VideoUpdateManyWithoutUsersInput>;
  promoCodes?: Maybe<PromoCodeUpdateManyWithoutUserInput>;
  active?: Maybe<Boolean>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface UserUpdateipsInput {
  set?: Maybe<String[] | String>;
}

export interface VideoUpdateManyWithoutUsersInput {
  create?: Maybe<VideoCreateWithoutUsersInput[] | VideoCreateWithoutUsersInput>;
  delete?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  connect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  set?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  disconnect?: Maybe<VideoWhereUniqueInput[] | VideoWhereUniqueInput>;
  update?: Maybe<
    | VideoUpdateWithWhereUniqueWithoutUsersInput[]
    | VideoUpdateWithWhereUniqueWithoutUsersInput
  >;
  upsert?: Maybe<
    | VideoUpsertWithWhereUniqueWithoutUsersInput[]
    | VideoUpsertWithWhereUniqueWithoutUsersInput
  >;
  deleteMany?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  updateMany?: Maybe<
    VideoUpdateManyWithWhereNestedInput[] | VideoUpdateManyWithWhereNestedInput
  >;
}

export interface VideoUpdateWithWhereUniqueWithoutUsersInput {
  where: VideoWhereUniqueInput;
  data: VideoUpdateWithoutUsersDataInput;
}

export interface VideoUpdateWithoutUsersDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  published?: Maybe<Boolean>;
  price?: Maybe<Float>;
  start?: Maybe<Int>;
  type?: Maybe<VideoType>;
  familyId?: Maybe<String>;
  promoVideo?: Maybe<PromoVideoUpdateOneWithoutVideoInput>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoUpdateoptionsInput>;
}

export interface PromoVideoUpdateOneWithoutVideoInput {
  create?: Maybe<PromoVideoCreateWithoutVideoInput>;
  update?: Maybe<PromoVideoUpdateWithoutVideoDataInput>;
  upsert?: Maybe<PromoVideoUpsertWithoutVideoInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<PromoVideoWhereUniqueInput>;
}

export interface PromoVideoUpdateWithoutVideoDataInput {
  link?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  familyId?: Maybe<String>;
  banner?: Maybe<String>;
  bannerMobile?: Maybe<String>;
  type?: Maybe<VideoType>;
}

export interface PromoVideoUpsertWithoutVideoInput {
  update: PromoVideoUpdateWithoutVideoDataInput;
  create: PromoVideoCreateWithoutVideoInput;
}

export interface VideoUpdateoptionsInput {
  set?: Maybe<String[] | String>;
}

export interface VideoUpsertWithWhereUniqueWithoutUsersInput {
  where: VideoWhereUniqueInput;
  update: VideoUpdateWithoutUsersDataInput;
  create: VideoCreateWithoutUsersInput;
}

export interface VideoScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  keywords?: Maybe<String>;
  keywords_not?: Maybe<String>;
  keywords_in?: Maybe<String[] | String>;
  keywords_not_in?: Maybe<String[] | String>;
  keywords_lt?: Maybe<String>;
  keywords_lte?: Maybe<String>;
  keywords_gt?: Maybe<String>;
  keywords_gte?: Maybe<String>;
  keywords_contains?: Maybe<String>;
  keywords_not_contains?: Maybe<String>;
  keywords_starts_with?: Maybe<String>;
  keywords_not_starts_with?: Maybe<String>;
  keywords_ends_with?: Maybe<String>;
  keywords_not_ends_with?: Maybe<String>;
  title?: Maybe<String>;
  title_not?: Maybe<String>;
  title_in?: Maybe<String[] | String>;
  title_not_in?: Maybe<String[] | String>;
  title_lt?: Maybe<String>;
  title_lte?: Maybe<String>;
  title_gt?: Maybe<String>;
  title_gte?: Maybe<String>;
  title_contains?: Maybe<String>;
  title_not_contains?: Maybe<String>;
  title_starts_with?: Maybe<String>;
  title_not_starts_with?: Maybe<String>;
  title_ends_with?: Maybe<String>;
  title_not_ends_with?: Maybe<String>;
  link?: Maybe<String>;
  link_not?: Maybe<String>;
  link_in?: Maybe<String[] | String>;
  link_not_in?: Maybe<String[] | String>;
  link_lt?: Maybe<String>;
  link_lte?: Maybe<String>;
  link_gt?: Maybe<String>;
  link_gte?: Maybe<String>;
  link_contains?: Maybe<String>;
  link_not_contains?: Maybe<String>;
  link_starts_with?: Maybe<String>;
  link_not_starts_with?: Maybe<String>;
  link_ends_with?: Maybe<String>;
  link_not_ends_with?: Maybe<String>;
  preview?: Maybe<String>;
  preview_not?: Maybe<String>;
  preview_in?: Maybe<String[] | String>;
  preview_not_in?: Maybe<String[] | String>;
  preview_lt?: Maybe<String>;
  preview_lte?: Maybe<String>;
  preview_gt?: Maybe<String>;
  preview_gte?: Maybe<String>;
  preview_contains?: Maybe<String>;
  preview_not_contains?: Maybe<String>;
  preview_starts_with?: Maybe<String>;
  preview_not_starts_with?: Maybe<String>;
  preview_ends_with?: Maybe<String>;
  preview_not_ends_with?: Maybe<String>;
  image?: Maybe<String>;
  image_not?: Maybe<String>;
  image_in?: Maybe<String[] | String>;
  image_not_in?: Maybe<String[] | String>;
  image_lt?: Maybe<String>;
  image_lte?: Maybe<String>;
  image_gt?: Maybe<String>;
  image_gte?: Maybe<String>;
  image_contains?: Maybe<String>;
  image_not_contains?: Maybe<String>;
  image_starts_with?: Maybe<String>;
  image_not_starts_with?: Maybe<String>;
  image_ends_with?: Maybe<String>;
  image_not_ends_with?: Maybe<String>;
  placeholder?: Maybe<String>;
  placeholder_not?: Maybe<String>;
  placeholder_in?: Maybe<String[] | String>;
  placeholder_not_in?: Maybe<String[] | String>;
  placeholder_lt?: Maybe<String>;
  placeholder_lte?: Maybe<String>;
  placeholder_gt?: Maybe<String>;
  placeholder_gte?: Maybe<String>;
  placeholder_contains?: Maybe<String>;
  placeholder_not_contains?: Maybe<String>;
  placeholder_starts_with?: Maybe<String>;
  placeholder_not_starts_with?: Maybe<String>;
  placeholder_ends_with?: Maybe<String>;
  placeholder_not_ends_with?: Maybe<String>;
  imageVertical?: Maybe<String>;
  imageVertical_not?: Maybe<String>;
  imageVertical_in?: Maybe<String[] | String>;
  imageVertical_not_in?: Maybe<String[] | String>;
  imageVertical_lt?: Maybe<String>;
  imageVertical_lte?: Maybe<String>;
  imageVertical_gt?: Maybe<String>;
  imageVertical_gte?: Maybe<String>;
  imageVertical_contains?: Maybe<String>;
  imageVertical_not_contains?: Maybe<String>;
  imageVertical_starts_with?: Maybe<String>;
  imageVertical_not_starts_with?: Maybe<String>;
  imageVertical_ends_with?: Maybe<String>;
  imageVertical_not_ends_with?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  placeholderVertical_not?: Maybe<String>;
  placeholderVertical_in?: Maybe<String[] | String>;
  placeholderVertical_not_in?: Maybe<String[] | String>;
  placeholderVertical_lt?: Maybe<String>;
  placeholderVertical_lte?: Maybe<String>;
  placeholderVertical_gt?: Maybe<String>;
  placeholderVertical_gte?: Maybe<String>;
  placeholderVertical_contains?: Maybe<String>;
  placeholderVertical_not_contains?: Maybe<String>;
  placeholderVertical_starts_with?: Maybe<String>;
  placeholderVertical_not_starts_with?: Maybe<String>;
  placeholderVertical_ends_with?: Maybe<String>;
  placeholderVertical_not_ends_with?: Maybe<String>;
  published?: Maybe<Boolean>;
  published_not?: Maybe<Boolean>;
  price?: Maybe<Float>;
  price_not?: Maybe<Float>;
  price_in?: Maybe<Float[] | Float>;
  price_not_in?: Maybe<Float[] | Float>;
  price_lt?: Maybe<Float>;
  price_lte?: Maybe<Float>;
  price_gt?: Maybe<Float>;
  price_gte?: Maybe<Float>;
  start?: Maybe<Int>;
  start_not?: Maybe<Int>;
  start_in?: Maybe<Int[] | Int>;
  start_not_in?: Maybe<Int[] | Int>;
  start_lt?: Maybe<Int>;
  start_lte?: Maybe<Int>;
  start_gt?: Maybe<Int>;
  start_gte?: Maybe<Int>;
  type?: Maybe<VideoType>;
  type_not?: Maybe<VideoType>;
  type_in?: Maybe<VideoType[] | VideoType>;
  type_not_in?: Maybe<VideoType[] | VideoType>;
  familyId?: Maybe<String>;
  familyId_not?: Maybe<String>;
  familyId_in?: Maybe<String[] | String>;
  familyId_not_in?: Maybe<String[] | String>;
  familyId_lt?: Maybe<String>;
  familyId_lte?: Maybe<String>;
  familyId_gt?: Maybe<String>;
  familyId_gte?: Maybe<String>;
  familyId_contains?: Maybe<String>;
  familyId_not_contains?: Maybe<String>;
  familyId_starts_with?: Maybe<String>;
  familyId_not_starts_with?: Maybe<String>;
  familyId_ends_with?: Maybe<String>;
  familyId_not_ends_with?: Maybe<String>;
  suggest?: Maybe<Boolean>;
  suggest_not?: Maybe<Boolean>;
  AND?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  OR?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
  NOT?: Maybe<VideoScalarWhereInput[] | VideoScalarWhereInput>;
}

export interface VideoUpdateManyWithWhereNestedInput {
  where: VideoScalarWhereInput;
  data: VideoUpdateManyDataInput;
}

export interface VideoUpdateManyDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  published?: Maybe<Boolean>;
  price?: Maybe<Float>;
  start?: Maybe<Int>;
  type?: Maybe<VideoType>;
  familyId?: Maybe<String>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoUpdateoptionsInput>;
}

export interface PromoCodeUpdateManyWithoutUserInput {
  create?: Maybe<
    PromoCodeCreateWithoutUserInput[] | PromoCodeCreateWithoutUserInput
  >;
  delete?: Maybe<PromoCodeWhereUniqueInput[] | PromoCodeWhereUniqueInput>;
  connect?: Maybe<PromoCodeWhereUniqueInput[] | PromoCodeWhereUniqueInput>;
  set?: Maybe<PromoCodeWhereUniqueInput[] | PromoCodeWhereUniqueInput>;
  disconnect?: Maybe<PromoCodeWhereUniqueInput[] | PromoCodeWhereUniqueInput>;
  update?: Maybe<
    | PromoCodeUpdateWithWhereUniqueWithoutUserInput[]
    | PromoCodeUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | PromoCodeUpsertWithWhereUniqueWithoutUserInput[]
    | PromoCodeUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<PromoCodeScalarWhereInput[] | PromoCodeScalarWhereInput>;
  updateMany?: Maybe<
    | PromoCodeUpdateManyWithWhereNestedInput[]
    | PromoCodeUpdateManyWithWhereNestedInput
  >;
}

export interface PromoCodeUpdateWithWhereUniqueWithoutUserInput {
  where: PromoCodeWhereUniqueInput;
  data: PromoCodeUpdateWithoutUserDataInput;
}

export interface PromoCodeUpdateWithoutUserDataInput {
  code?: Maybe<String>;
  valid?: Maybe<Boolean>;
  type?: Maybe<VideoType>;
  endDate?: Maybe<String>;
  video?: Maybe<VideoUpdateOneInput>;
}

export interface VideoUpdateOneInput {
  create?: Maybe<VideoCreateInput>;
  update?: Maybe<VideoUpdateDataInput>;
  upsert?: Maybe<VideoUpsertNestedInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VideoWhereUniqueInput>;
}

export interface VideoUpdateDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutVideosInput>;
  published?: Maybe<Boolean>;
  price?: Maybe<Float>;
  start?: Maybe<Int>;
  type?: Maybe<VideoType>;
  familyId?: Maybe<String>;
  promoVideo?: Maybe<PromoVideoUpdateOneWithoutVideoInput>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoUpdateoptionsInput>;
}

export interface UserUpdateManyWithoutVideosInput {
  create?: Maybe<UserCreateWithoutVideosInput[] | UserCreateWithoutVideosInput>;
  delete?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  connect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  set?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  disconnect?: Maybe<UserWhereUniqueInput[] | UserWhereUniqueInput>;
  update?: Maybe<
    | UserUpdateWithWhereUniqueWithoutVideosInput[]
    | UserUpdateWithWhereUniqueWithoutVideosInput
  >;
  upsert?: Maybe<
    | UserUpsertWithWhereUniqueWithoutVideosInput[]
    | UserUpsertWithWhereUniqueWithoutVideosInput
  >;
  deleteMany?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  updateMany?: Maybe<
    UserUpdateManyWithWhereNestedInput[] | UserUpdateManyWithWhereNestedInput
  >;
}

export interface UserUpdateWithWhereUniqueWithoutVideosInput {
  where: UserWhereUniqueInput;
  data: UserUpdateWithoutVideosDataInput;
}

export interface UserUpdateWithoutVideosDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserUpdateipsInput>;
  promoCodes?: Maybe<PromoCodeUpdateManyWithoutUserInput>;
  active?: Maybe<Boolean>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface OrderUpdateManyWithoutUserInput {
  create?: Maybe<OrderCreateWithoutUserInput[] | OrderCreateWithoutUserInput>;
  delete?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  connect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  set?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  disconnect?: Maybe<OrderWhereUniqueInput[] | OrderWhereUniqueInput>;
  update?: Maybe<
    | OrderUpdateWithWhereUniqueWithoutUserInput[]
    | OrderUpdateWithWhereUniqueWithoutUserInput
  >;
  upsert?: Maybe<
    | OrderUpsertWithWhereUniqueWithoutUserInput[]
    | OrderUpsertWithWhereUniqueWithoutUserInput
  >;
  deleteMany?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  updateMany?: Maybe<
    OrderUpdateManyWithWhereNestedInput[] | OrderUpdateManyWithWhereNestedInput
  >;
}

export interface OrderUpdateWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  data: OrderUpdateWithoutUserDataInput;
}

export interface OrderUpdateWithoutUserDataInput {
  paymentId?: Maybe<String>;
  video?: Maybe<VideoUpdateOneInput>;
  paymentEmail?: Maybe<String>;
}

export interface OrderUpsertWithWhereUniqueWithoutUserInput {
  where: OrderWhereUniqueInput;
  update: OrderUpdateWithoutUserDataInput;
  create: OrderCreateWithoutUserInput;
}

export interface OrderScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  paymentId?: Maybe<String>;
  paymentId_not?: Maybe<String>;
  paymentId_in?: Maybe<String[] | String>;
  paymentId_not_in?: Maybe<String[] | String>;
  paymentId_lt?: Maybe<String>;
  paymentId_lte?: Maybe<String>;
  paymentId_gt?: Maybe<String>;
  paymentId_gte?: Maybe<String>;
  paymentId_contains?: Maybe<String>;
  paymentId_not_contains?: Maybe<String>;
  paymentId_starts_with?: Maybe<String>;
  paymentId_not_starts_with?: Maybe<String>;
  paymentId_ends_with?: Maybe<String>;
  paymentId_not_ends_with?: Maybe<String>;
  paymentEmail?: Maybe<String>;
  paymentEmail_not?: Maybe<String>;
  paymentEmail_in?: Maybe<String[] | String>;
  paymentEmail_not_in?: Maybe<String[] | String>;
  paymentEmail_lt?: Maybe<String>;
  paymentEmail_lte?: Maybe<String>;
  paymentEmail_gt?: Maybe<String>;
  paymentEmail_gte?: Maybe<String>;
  paymentEmail_contains?: Maybe<String>;
  paymentEmail_not_contains?: Maybe<String>;
  paymentEmail_starts_with?: Maybe<String>;
  paymentEmail_not_starts_with?: Maybe<String>;
  paymentEmail_ends_with?: Maybe<String>;
  paymentEmail_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  OR?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
  NOT?: Maybe<OrderScalarWhereInput[] | OrderScalarWhereInput>;
}

export interface OrderUpdateManyWithWhereNestedInput {
  where: OrderScalarWhereInput;
  data: OrderUpdateManyDataInput;
}

export interface OrderUpdateManyDataInput {
  paymentId?: Maybe<String>;
  paymentEmail?: Maybe<String>;
}

export interface UserUpsertWithWhereUniqueWithoutVideosInput {
  where: UserWhereUniqueInput;
  update: UserUpdateWithoutVideosDataInput;
  create: UserCreateWithoutVideosInput;
}

export interface UserScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  phone?: Maybe<String>;
  phone_not?: Maybe<String>;
  phone_in?: Maybe<String[] | String>;
  phone_not_in?: Maybe<String[] | String>;
  phone_lt?: Maybe<String>;
  phone_lte?: Maybe<String>;
  phone_gt?: Maybe<String>;
  phone_gte?: Maybe<String>;
  phone_contains?: Maybe<String>;
  phone_not_contains?: Maybe<String>;
  phone_starts_with?: Maybe<String>;
  phone_not_starts_with?: Maybe<String>;
  phone_ends_with?: Maybe<String>;
  phone_not_ends_with?: Maybe<String>;
  active?: Maybe<Boolean>;
  active_not?: Maybe<Boolean>;
  subscribePromo?: Maybe<Boolean>;
  subscribePromo_not?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeEarlyAccess_not?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
  subscribeNews_not?: Maybe<Boolean>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  OR?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
  NOT?: Maybe<UserScalarWhereInput[] | UserScalarWhereInput>;
}

export interface UserUpdateManyWithWhereNestedInput {
  where: UserScalarWhereInput;
  data: UserUpdateManyDataInput;
}

export interface UserUpdateManyDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserUpdateipsInput>;
  active?: Maybe<Boolean>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface VideoUpsertNestedInput {
  update: VideoUpdateDataInput;
  create: VideoCreateInput;
}

export interface PromoCodeUpsertWithWhereUniqueWithoutUserInput {
  where: PromoCodeWhereUniqueInput;
  update: PromoCodeUpdateWithoutUserDataInput;
  create: PromoCodeCreateWithoutUserInput;
}

export interface PromoCodeScalarWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  code?: Maybe<String>;
  code_not?: Maybe<String>;
  code_in?: Maybe<String[] | String>;
  code_not_in?: Maybe<String[] | String>;
  code_lt?: Maybe<String>;
  code_lte?: Maybe<String>;
  code_gt?: Maybe<String>;
  code_gte?: Maybe<String>;
  code_contains?: Maybe<String>;
  code_not_contains?: Maybe<String>;
  code_starts_with?: Maybe<String>;
  code_not_starts_with?: Maybe<String>;
  code_ends_with?: Maybe<String>;
  code_not_ends_with?: Maybe<String>;
  valid?: Maybe<Boolean>;
  valid_not?: Maybe<Boolean>;
  type?: Maybe<VideoType>;
  type_not?: Maybe<VideoType>;
  type_in?: Maybe<VideoType[] | VideoType>;
  type_not_in?: Maybe<VideoType[] | VideoType>;
  endDate?: Maybe<String>;
  endDate_not?: Maybe<String>;
  endDate_in?: Maybe<String[] | String>;
  endDate_not_in?: Maybe<String[] | String>;
  endDate_lt?: Maybe<String>;
  endDate_lte?: Maybe<String>;
  endDate_gt?: Maybe<String>;
  endDate_gte?: Maybe<String>;
  endDate_contains?: Maybe<String>;
  endDate_not_contains?: Maybe<String>;
  endDate_starts_with?: Maybe<String>;
  endDate_not_starts_with?: Maybe<String>;
  endDate_ends_with?: Maybe<String>;
  endDate_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  AND?: Maybe<PromoCodeScalarWhereInput[] | PromoCodeScalarWhereInput>;
  OR?: Maybe<PromoCodeScalarWhereInput[] | PromoCodeScalarWhereInput>;
  NOT?: Maybe<PromoCodeScalarWhereInput[] | PromoCodeScalarWhereInput>;
}

export interface PromoCodeUpdateManyWithWhereNestedInput {
  where: PromoCodeScalarWhereInput;
  data: PromoCodeUpdateManyDataInput;
}

export interface PromoCodeUpdateManyDataInput {
  code?: Maybe<String>;
  valid?: Maybe<Boolean>;
  type?: Maybe<VideoType>;
  endDate?: Maybe<String>;
}

export interface UserUpsertWithoutOrdersInput {
  update: UserUpdateWithoutOrdersDataInput;
  create: UserCreateWithoutOrdersInput;
}

export interface OrderUpdateManyMutationInput {
  paymentId?: Maybe<String>;
  paymentEmail?: Maybe<String>;
}

export interface ProductCreateInput {
  link: String;
  name: String;
  description: String;
  image: String;
  placeholder: String;
  type: String;
}

export interface ProductUpdateInput {
  link?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  type?: Maybe<String>;
}

export interface ProductUpdateManyMutationInput {
  link?: Maybe<String>;
  name?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  type?: Maybe<String>;
}

export interface PromoCodeCreateInput {
  code: String;
  valid?: Maybe<Boolean>;
  type: VideoType;
  endDate?: Maybe<String>;
  user: UserCreateOneWithoutPromoCodesInput;
  video?: Maybe<VideoCreateOneInput>;
}

export interface UserCreateOneWithoutPromoCodesInput {
  create?: Maybe<UserCreateWithoutPromoCodesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserCreateWithoutPromoCodesInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserCreateipsInput>;
  videos?: Maybe<VideoCreateManyWithoutUsersInput>;
  active?: Maybe<Boolean>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface PromoCodeUpdateInput {
  code?: Maybe<String>;
  valid?: Maybe<Boolean>;
  type?: Maybe<VideoType>;
  endDate?: Maybe<String>;
  user?: Maybe<UserUpdateOneRequiredWithoutPromoCodesInput>;
  video?: Maybe<VideoUpdateOneInput>;
}

export interface UserUpdateOneRequiredWithoutPromoCodesInput {
  create?: Maybe<UserCreateWithoutPromoCodesInput>;
  update?: Maybe<UserUpdateWithoutPromoCodesDataInput>;
  upsert?: Maybe<UserUpsertWithoutPromoCodesInput>;
  connect?: Maybe<UserWhereUniqueInput>;
}

export interface UserUpdateWithoutPromoCodesDataInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserUpdateipsInput>;
  videos?: Maybe<VideoUpdateManyWithoutUsersInput>;
  active?: Maybe<Boolean>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface UserUpsertWithoutPromoCodesInput {
  update: UserUpdateWithoutPromoCodesDataInput;
  create: UserCreateWithoutPromoCodesInput;
}

export interface PromoCodeUpdateManyMutationInput {
  code?: Maybe<String>;
  valid?: Maybe<Boolean>;
  type?: Maybe<VideoType>;
  endDate?: Maybe<String>;
}

export interface PromoVideoCreateInput {
  link: String;
  title: String;
  description: String;
  image: String;
  placeholder?: Maybe<String>;
  familyId?: Maybe<String>;
  banner: String;
  bannerMobile: String;
  type: VideoType;
  video?: Maybe<VideoCreateOneWithoutPromoVideoInput>;
}

export interface VideoCreateOneWithoutPromoVideoInput {
  create?: Maybe<VideoCreateWithoutPromoVideoInput>;
  connect?: Maybe<VideoWhereUniqueInput>;
}

export interface VideoCreateWithoutPromoVideoInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview: String;
  image: String;
  placeholder: String;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  users?: Maybe<UserCreateManyWithoutVideosInput>;
  published?: Maybe<Boolean>;
  price: Float;
  start: Int;
  type: VideoType;
  familyId?: Maybe<String>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoCreateoptionsInput>;
}

export interface PromoVideoUpdateInput {
  link?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  familyId?: Maybe<String>;
  banner?: Maybe<String>;
  bannerMobile?: Maybe<String>;
  type?: Maybe<VideoType>;
  video?: Maybe<VideoUpdateOneWithoutPromoVideoInput>;
}

export interface VideoUpdateOneWithoutPromoVideoInput {
  create?: Maybe<VideoCreateWithoutPromoVideoInput>;
  update?: Maybe<VideoUpdateWithoutPromoVideoDataInput>;
  upsert?: Maybe<VideoUpsertWithoutPromoVideoInput>;
  delete?: Maybe<Boolean>;
  disconnect?: Maybe<Boolean>;
  connect?: Maybe<VideoWhereUniqueInput>;
}

export interface VideoUpdateWithoutPromoVideoDataInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutVideosInput>;
  published?: Maybe<Boolean>;
  price?: Maybe<Float>;
  start?: Maybe<Int>;
  type?: Maybe<VideoType>;
  familyId?: Maybe<String>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoUpdateoptionsInput>;
}

export interface VideoUpsertWithoutPromoVideoInput {
  update: VideoUpdateWithoutPromoVideoDataInput;
  create: VideoCreateWithoutPromoVideoInput;
}

export interface PromoVideoUpdateManyMutationInput {
  link?: Maybe<String>;
  title?: Maybe<String>;
  description?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  familyId?: Maybe<String>;
  banner?: Maybe<String>;
  bannerMobile?: Maybe<String>;
  type?: Maybe<VideoType>;
}

export interface QuoteCreateInput {
  text: String;
  linkTo?: Maybe<String>;
}

export interface QuoteUpdateInput {
  text?: Maybe<String>;
  linkTo?: Maybe<String>;
}

export interface QuoteUpdateManyMutationInput {
  text?: Maybe<String>;
  linkTo?: Maybe<String>;
}

export interface SitePromoCreateInput {
  type: VideoType;
  promoOffer: PromoOffer;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  title: String;
  subtitle: String;
  description: String;
  newPrice?: Maybe<Float>;
}

export interface SitePromoUpdateInput {
  type?: Maybe<VideoType>;
  promoOffer?: Maybe<PromoOffer>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  title?: Maybe<String>;
  subtitle?: Maybe<String>;
  description?: Maybe<String>;
  newPrice?: Maybe<Float>;
}

export interface SitePromoUpdateManyMutationInput {
  type?: Maybe<VideoType>;
  promoOffer?: Maybe<PromoOffer>;
  startDate?: Maybe<String>;
  endDate?: Maybe<String>;
  title?: Maybe<String>;
  subtitle?: Maybe<String>;
  description?: Maybe<String>;
  newPrice?: Maybe<Float>;
}

export interface UserCreateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserCreateipsInput>;
  videos?: Maybe<VideoCreateManyWithoutUsersInput>;
  promoCodes?: Maybe<PromoCodeCreateManyWithoutUserInput>;
  active?: Maybe<Boolean>;
  orders?: Maybe<OrderCreateManyWithoutUserInput>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface UserUpdateInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserUpdateipsInput>;
  videos?: Maybe<VideoUpdateManyWithoutUsersInput>;
  promoCodes?: Maybe<PromoCodeUpdateManyWithoutUserInput>;
  active?: Maybe<Boolean>;
  orders?: Maybe<OrderUpdateManyWithoutUserInput>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface UserUpdateManyMutationInput {
  firstName?: Maybe<String>;
  lastName?: Maybe<String>;
  email?: Maybe<String>;
  password?: Maybe<String>;
  phone?: Maybe<String>;
  ips?: Maybe<UserUpdateipsInput>;
  active?: Maybe<Boolean>;
  subscribePromo?: Maybe<Boolean>;
  subscribeEarlyAccess?: Maybe<Boolean>;
  subscribeNews?: Maybe<Boolean>;
}

export interface VideoUpdateInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  users?: Maybe<UserUpdateManyWithoutVideosInput>;
  published?: Maybe<Boolean>;
  price?: Maybe<Float>;
  start?: Maybe<Int>;
  type?: Maybe<VideoType>;
  familyId?: Maybe<String>;
  promoVideo?: Maybe<PromoVideoUpdateOneWithoutVideoInput>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoUpdateoptionsInput>;
}

export interface VideoUpdateManyMutationInput {
  name?: Maybe<String>;
  keywords?: Maybe<String>;
  title?: Maybe<String>;
  link?: Maybe<String>;
  preview?: Maybe<String>;
  image?: Maybe<String>;
  placeholder?: Maybe<String>;
  imageVertical?: Maybe<String>;
  placeholderVertical?: Maybe<String>;
  published?: Maybe<Boolean>;
  price?: Maybe<Float>;
  start?: Maybe<Int>;
  type?: Maybe<VideoType>;
  familyId?: Maybe<String>;
  suggest?: Maybe<Boolean>;
  options?: Maybe<VideoUpdateoptionsInput>;
}

export interface OrderSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<OrderWhereInput>;
  AND?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  OR?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
  NOT?: Maybe<OrderSubscriptionWhereInput[] | OrderSubscriptionWhereInput>;
}

export interface ProductSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProductWhereInput>;
  AND?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  OR?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
  NOT?: Maybe<ProductSubscriptionWhereInput[] | ProductSubscriptionWhereInput>;
}

export interface PromoCodeSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PromoCodeWhereInput>;
  AND?: Maybe<
    PromoCodeSubscriptionWhereInput[] | PromoCodeSubscriptionWhereInput
  >;
  OR?: Maybe<
    PromoCodeSubscriptionWhereInput[] | PromoCodeSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PromoCodeSubscriptionWhereInput[] | PromoCodeSubscriptionWhereInput
  >;
}

export interface PromoVideoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PromoVideoWhereInput>;
  AND?: Maybe<
    PromoVideoSubscriptionWhereInput[] | PromoVideoSubscriptionWhereInput
  >;
  OR?: Maybe<
    PromoVideoSubscriptionWhereInput[] | PromoVideoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    PromoVideoSubscriptionWhereInput[] | PromoVideoSubscriptionWhereInput
  >;
}

export interface QuoteSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<QuoteWhereInput>;
  AND?: Maybe<QuoteSubscriptionWhereInput[] | QuoteSubscriptionWhereInput>;
  OR?: Maybe<QuoteSubscriptionWhereInput[] | QuoteSubscriptionWhereInput>;
  NOT?: Maybe<QuoteSubscriptionWhereInput[] | QuoteSubscriptionWhereInput>;
}

export interface SitePromoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<SitePromoWhereInput>;
  AND?: Maybe<
    SitePromoSubscriptionWhereInput[] | SitePromoSubscriptionWhereInput
  >;
  OR?: Maybe<
    SitePromoSubscriptionWhereInput[] | SitePromoSubscriptionWhereInput
  >;
  NOT?: Maybe<
    SitePromoSubscriptionWhereInput[] | SitePromoSubscriptionWhereInput
  >;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface VideoSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<VideoWhereInput>;
  AND?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  OR?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
  NOT?: Maybe<VideoSubscriptionWhereInput[] | VideoSubscriptionWhereInput>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface Order {
  id: ID_Output;
  paymentId: String;
  paymentEmail?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPromise extends Promise<Order>, Fragmentable {
  id: () => Promise<ID_Output>;
  paymentId: () => Promise<String>;
  user: <T = UserPromise>() => T;
  video: <T = VideoPromise>() => T;
  paymentEmail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderSubscription
  extends Promise<AsyncIterator<Order>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  paymentId: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  video: <T = VideoSubscription>() => T;
  paymentEmail: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface OrderNullablePromise
  extends Promise<Order | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  paymentId: () => Promise<String>;
  user: <T = UserPromise>() => T;
  video: <T = VideoPromise>() => T;
  paymentEmail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface User {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  phone?: String;
  ips: String[];
  active: Boolean;
  subscribePromo: Boolean;
  subscribeEarlyAccess: Boolean;
  subscribeNews: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  ips: () => Promise<String[]>;
  videos: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  promoCodes: <T = FragmentableArray<PromoCode>>(args?: {
    where?: PromoCodeWhereInput;
    orderBy?: PromoCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  active: () => Promise<Boolean>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subscribePromo: () => Promise<Boolean>;
  subscribeEarlyAccess: () => Promise<Boolean>;
  subscribeNews: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  ips: () => Promise<AsyncIterator<String[]>>;
  videos: <T = Promise<AsyncIterator<VideoSubscription>>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  promoCodes: <T = Promise<AsyncIterator<PromoCodeSubscription>>>(args?: {
    where?: PromoCodeWhereInput;
    orderBy?: PromoCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  active: () => Promise<AsyncIterator<Boolean>>;
  orders: <T = Promise<AsyncIterator<OrderSubscription>>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subscribePromo: () => Promise<AsyncIterator<Boolean>>;
  subscribeEarlyAccess: () => Promise<AsyncIterator<Boolean>>;
  subscribeNews: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  ips: () => Promise<String[]>;
  videos: <T = FragmentableArray<Video>>(args?: {
    where?: VideoWhereInput;
    orderBy?: VideoOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  promoCodes: <T = FragmentableArray<PromoCode>>(args?: {
    where?: PromoCodeWhereInput;
    orderBy?: PromoCodeOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  active: () => Promise<Boolean>;
  orders: <T = FragmentableArray<Order>>(args?: {
    where?: OrderWhereInput;
    orderBy?: OrderOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  subscribePromo: () => Promise<Boolean>;
  subscribeEarlyAccess: () => Promise<Boolean>;
  subscribeNews: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface Video {
  id: ID_Output;
  name?: String;
  keywords?: String;
  title?: String;
  link?: String;
  preview: String;
  image: String;
  placeholder: String;
  imageVertical?: String;
  placeholderVertical?: String;
  published: Boolean;
  price: Float;
  start: Int;
  type: VideoType;
  familyId?: String;
  suggest: Boolean;
  options: String[];
}

export interface VideoPromise extends Promise<Video>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String>;
  title: () => Promise<String>;
  link: () => Promise<String>;
  preview: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  imageVertical: () => Promise<String>;
  placeholderVertical: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  published: () => Promise<Boolean>;
  price: () => Promise<Float>;
  start: () => Promise<Int>;
  type: () => Promise<VideoType>;
  familyId: () => Promise<String>;
  promoVideo: <T = PromoVideoPromise>() => T;
  suggest: () => Promise<Boolean>;
  options: () => Promise<String[]>;
}

export interface VideoSubscription
  extends Promise<AsyncIterator<Video>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  preview: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
  imageVertical: () => Promise<AsyncIterator<String>>;
  placeholderVertical: () => Promise<AsyncIterator<String>>;
  users: <T = Promise<AsyncIterator<UserSubscription>>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  published: () => Promise<AsyncIterator<Boolean>>;
  price: () => Promise<AsyncIterator<Float>>;
  start: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<VideoType>>;
  familyId: () => Promise<AsyncIterator<String>>;
  promoVideo: <T = PromoVideoSubscription>() => T;
  suggest: () => Promise<AsyncIterator<Boolean>>;
  options: () => Promise<AsyncIterator<String[]>>;
}

export interface VideoNullablePromise
  extends Promise<Video | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String>;
  title: () => Promise<String>;
  link: () => Promise<String>;
  preview: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  imageVertical: () => Promise<String>;
  placeholderVertical: () => Promise<String>;
  users: <T = FragmentableArray<User>>(args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => T;
  published: () => Promise<Boolean>;
  price: () => Promise<Float>;
  start: () => Promise<Int>;
  type: () => Promise<VideoType>;
  familyId: () => Promise<String>;
  promoVideo: <T = PromoVideoPromise>() => T;
  suggest: () => Promise<Boolean>;
  options: () => Promise<String[]>;
}

export interface PromoVideo {
  id: ID_Output;
  link: String;
  title: String;
  description: String;
  image: String;
  placeholder?: String;
  familyId: String;
  banner: String;
  bannerMobile: String;
  type: VideoType;
}

export interface PromoVideoPromise extends Promise<PromoVideo>, Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  familyId: () => Promise<String>;
  banner: () => Promise<String>;
  bannerMobile: () => Promise<String>;
  type: () => Promise<VideoType>;
  video: <T = VideoPromise>() => T;
}

export interface PromoVideoSubscription
  extends Promise<AsyncIterator<PromoVideo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
  familyId: () => Promise<AsyncIterator<String>>;
  banner: () => Promise<AsyncIterator<String>>;
  bannerMobile: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<VideoType>>;
  video: <T = VideoSubscription>() => T;
}

export interface PromoVideoNullablePromise
  extends Promise<PromoVideo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  familyId: () => Promise<String>;
  banner: () => Promise<String>;
  bannerMobile: () => Promise<String>;
  type: () => Promise<VideoType>;
  video: <T = VideoPromise>() => T;
}

export interface PromoCode {
  id: ID_Output;
  code: String;
  valid: Boolean;
  type: VideoType;
  endDate?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PromoCodePromise extends Promise<PromoCode>, Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  valid: () => Promise<Boolean>;
  type: () => Promise<VideoType>;
  endDate: () => Promise<String>;
  user: <T = UserPromise>() => T;
  video: <T = VideoPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PromoCodeSubscription
  extends Promise<AsyncIterator<PromoCode>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  valid: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<VideoType>>;
  endDate: () => Promise<AsyncIterator<String>>;
  user: <T = UserSubscription>() => T;
  video: <T = VideoSubscription>() => T;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PromoCodeNullablePromise
  extends Promise<PromoCode | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  valid: () => Promise<Boolean>;
  type: () => Promise<VideoType>;
  endDate: () => Promise<String>;
  user: <T = UserPromise>() => T;
  video: <T = VideoPromise>() => T;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderConnection {
  pageInfo: PageInfo;
  edges: OrderEdge[];
}

export interface OrderConnectionPromise
  extends Promise<OrderConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<OrderEdge>>() => T;
  aggregate: <T = AggregateOrderPromise>() => T;
}

export interface OrderConnectionSubscription
  extends Promise<AsyncIterator<OrderConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<OrderEdgeSubscription>>>() => T;
  aggregate: <T = AggregateOrderSubscription>() => T;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface OrderEdge {
  node: Order;
  cursor: String;
}

export interface OrderEdgePromise extends Promise<OrderEdge>, Fragmentable {
  node: <T = OrderPromise>() => T;
  cursor: () => Promise<String>;
}

export interface OrderEdgeSubscription
  extends Promise<AsyncIterator<OrderEdge>>,
    Fragmentable {
  node: <T = OrderSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateOrder {
  count: Int;
}

export interface AggregateOrderPromise
  extends Promise<AggregateOrder>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateOrderSubscription
  extends Promise<AsyncIterator<AggregateOrder>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Product {
  id: ID_Output;
  link: String;
  name: String;
  description: String;
  image: String;
  placeholder: String;
  type: String;
}

export interface ProductPromise extends Promise<Product>, Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  type: () => Promise<String>;
}

export interface ProductSubscription
  extends Promise<AsyncIterator<Product>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface ProductNullablePromise
  extends Promise<Product | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  type: () => Promise<String>;
}

export interface ProductConnection {
  pageInfo: PageInfo;
  edges: ProductEdge[];
}

export interface ProductConnectionPromise
  extends Promise<ProductConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProductEdge>>() => T;
  aggregate: <T = AggregateProductPromise>() => T;
}

export interface ProductConnectionSubscription
  extends Promise<AsyncIterator<ProductConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProductEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProductSubscription>() => T;
}

export interface ProductEdge {
  node: Product;
  cursor: String;
}

export interface ProductEdgePromise extends Promise<ProductEdge>, Fragmentable {
  node: <T = ProductPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProductEdgeSubscription
  extends Promise<AsyncIterator<ProductEdge>>,
    Fragmentable {
  node: <T = ProductSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateProduct {
  count: Int;
}

export interface AggregateProductPromise
  extends Promise<AggregateProduct>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProductSubscription
  extends Promise<AsyncIterator<AggregateProduct>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PromoCodeConnection {
  pageInfo: PageInfo;
  edges: PromoCodeEdge[];
}

export interface PromoCodeConnectionPromise
  extends Promise<PromoCodeConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PromoCodeEdge>>() => T;
  aggregate: <T = AggregatePromoCodePromise>() => T;
}

export interface PromoCodeConnectionSubscription
  extends Promise<AsyncIterator<PromoCodeConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PromoCodeEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePromoCodeSubscription>() => T;
}

export interface PromoCodeEdge {
  node: PromoCode;
  cursor: String;
}

export interface PromoCodeEdgePromise
  extends Promise<PromoCodeEdge>,
    Fragmentable {
  node: <T = PromoCodePromise>() => T;
  cursor: () => Promise<String>;
}

export interface PromoCodeEdgeSubscription
  extends Promise<AsyncIterator<PromoCodeEdge>>,
    Fragmentable {
  node: <T = PromoCodeSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePromoCode {
  count: Int;
}

export interface AggregatePromoCodePromise
  extends Promise<AggregatePromoCode>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePromoCodeSubscription
  extends Promise<AsyncIterator<AggregatePromoCode>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface PromoVideoConnection {
  pageInfo: PageInfo;
  edges: PromoVideoEdge[];
}

export interface PromoVideoConnectionPromise
  extends Promise<PromoVideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PromoVideoEdge>>() => T;
  aggregate: <T = AggregatePromoVideoPromise>() => T;
}

export interface PromoVideoConnectionSubscription
  extends Promise<AsyncIterator<PromoVideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PromoVideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePromoVideoSubscription>() => T;
}

export interface PromoVideoEdge {
  node: PromoVideo;
  cursor: String;
}

export interface PromoVideoEdgePromise
  extends Promise<PromoVideoEdge>,
    Fragmentable {
  node: <T = PromoVideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PromoVideoEdgeSubscription
  extends Promise<AsyncIterator<PromoVideoEdge>>,
    Fragmentable {
  node: <T = PromoVideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePromoVideo {
  count: Int;
}

export interface AggregatePromoVideoPromise
  extends Promise<AggregatePromoVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePromoVideoSubscription
  extends Promise<AsyncIterator<AggregatePromoVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface Quote {
  id: ID_Output;
  text: String;
  linkTo?: String;
}

export interface QuotePromise extends Promise<Quote>, Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  linkTo: () => Promise<String>;
}

export interface QuoteSubscription
  extends Promise<AsyncIterator<Quote>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  linkTo: () => Promise<AsyncIterator<String>>;
}

export interface QuoteNullablePromise
  extends Promise<Quote | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  linkTo: () => Promise<String>;
}

export interface QuoteConnection {
  pageInfo: PageInfo;
  edges: QuoteEdge[];
}

export interface QuoteConnectionPromise
  extends Promise<QuoteConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<QuoteEdge>>() => T;
  aggregate: <T = AggregateQuotePromise>() => T;
}

export interface QuoteConnectionSubscription
  extends Promise<AsyncIterator<QuoteConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<QuoteEdgeSubscription>>>() => T;
  aggregate: <T = AggregateQuoteSubscription>() => T;
}

export interface QuoteEdge {
  node: Quote;
  cursor: String;
}

export interface QuoteEdgePromise extends Promise<QuoteEdge>, Fragmentable {
  node: <T = QuotePromise>() => T;
  cursor: () => Promise<String>;
}

export interface QuoteEdgeSubscription
  extends Promise<AsyncIterator<QuoteEdge>>,
    Fragmentable {
  node: <T = QuoteSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateQuote {
  count: Int;
}

export interface AggregateQuotePromise
  extends Promise<AggregateQuote>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateQuoteSubscription
  extends Promise<AsyncIterator<AggregateQuote>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface SitePromo {
  id: ID_Output;
  type: VideoType;
  promoOffer: PromoOffer;
  startDate?: String;
  endDate?: String;
  title: String;
  subtitle: String;
  description: String;
  newPrice?: Float;
}

export interface SitePromoPromise extends Promise<SitePromo>, Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<VideoType>;
  promoOffer: () => Promise<PromoOffer>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  title: () => Promise<String>;
  subtitle: () => Promise<String>;
  description: () => Promise<String>;
  newPrice: () => Promise<Float>;
}

export interface SitePromoSubscription
  extends Promise<AsyncIterator<SitePromo>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<VideoType>>;
  promoOffer: () => Promise<AsyncIterator<PromoOffer>>;
  startDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  subtitle: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  newPrice: () => Promise<AsyncIterator<Float>>;
}

export interface SitePromoNullablePromise
  extends Promise<SitePromo | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<VideoType>;
  promoOffer: () => Promise<PromoOffer>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  title: () => Promise<String>;
  subtitle: () => Promise<String>;
  description: () => Promise<String>;
  newPrice: () => Promise<Float>;
}

export interface SitePromoConnection {
  pageInfo: PageInfo;
  edges: SitePromoEdge[];
}

export interface SitePromoConnectionPromise
  extends Promise<SitePromoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<SitePromoEdge>>() => T;
  aggregate: <T = AggregateSitePromoPromise>() => T;
}

export interface SitePromoConnectionSubscription
  extends Promise<AsyncIterator<SitePromoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<SitePromoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateSitePromoSubscription>() => T;
}

export interface SitePromoEdge {
  node: SitePromo;
  cursor: String;
}

export interface SitePromoEdgePromise
  extends Promise<SitePromoEdge>,
    Fragmentable {
  node: <T = SitePromoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface SitePromoEdgeSubscription
  extends Promise<AsyncIterator<SitePromoEdge>>,
    Fragmentable {
  node: <T = SitePromoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateSitePromo {
  count: Int;
}

export interface AggregateSitePromoPromise
  extends Promise<AggregateSitePromo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateSitePromoSubscription
  extends Promise<AsyncIterator<AggregateSitePromo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface VideoConnection {
  pageInfo: PageInfo;
  edges: VideoEdge[];
}

export interface VideoConnectionPromise
  extends Promise<VideoConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<VideoEdge>>() => T;
  aggregate: <T = AggregateVideoPromise>() => T;
}

export interface VideoConnectionSubscription
  extends Promise<AsyncIterator<VideoConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<VideoEdgeSubscription>>>() => T;
  aggregate: <T = AggregateVideoSubscription>() => T;
}

export interface VideoEdge {
  node: Video;
  cursor: String;
}

export interface VideoEdgePromise extends Promise<VideoEdge>, Fragmentable {
  node: <T = VideoPromise>() => T;
  cursor: () => Promise<String>;
}

export interface VideoEdgeSubscription
  extends Promise<AsyncIterator<VideoEdge>>,
    Fragmentable {
  node: <T = VideoSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface AggregateVideo {
  count: Int;
}

export interface AggregateVideoPromise
  extends Promise<AggregateVideo>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateVideoSubscription
  extends Promise<AsyncIterator<AggregateVideo>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface OrderSubscriptionPayload {
  mutation: MutationType;
  node: Order;
  updatedFields: String[];
  previousValues: OrderPreviousValues;
}

export interface OrderSubscriptionPayloadPromise
  extends Promise<OrderSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = OrderPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = OrderPreviousValuesPromise>() => T;
}

export interface OrderSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<OrderSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = OrderSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = OrderPreviousValuesSubscription>() => T;
}

export interface OrderPreviousValues {
  id: ID_Output;
  paymentId: String;
  paymentEmail?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface OrderPreviousValuesPromise
  extends Promise<OrderPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  paymentId: () => Promise<String>;
  paymentEmail: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface OrderPreviousValuesSubscription
  extends Promise<AsyncIterator<OrderPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  paymentId: () => Promise<AsyncIterator<String>>;
  paymentEmail: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface ProductSubscriptionPayload {
  mutation: MutationType;
  node: Product;
  updatedFields: String[];
  previousValues: ProductPreviousValues;
}

export interface ProductSubscriptionPayloadPromise
  extends Promise<ProductSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProductPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProductPreviousValuesPromise>() => T;
}

export interface ProductSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProductSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProductSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProductPreviousValuesSubscription>() => T;
}

export interface ProductPreviousValues {
  id: ID_Output;
  link: String;
  name: String;
  description: String;
  image: String;
  placeholder: String;
  type: String;
}

export interface ProductPreviousValuesPromise
  extends Promise<ProductPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  name: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  type: () => Promise<String>;
}

export interface ProductPreviousValuesSubscription
  extends Promise<AsyncIterator<ProductPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  name: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<String>>;
}

export interface PromoCodeSubscriptionPayload {
  mutation: MutationType;
  node: PromoCode;
  updatedFields: String[];
  previousValues: PromoCodePreviousValues;
}

export interface PromoCodeSubscriptionPayloadPromise
  extends Promise<PromoCodeSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PromoCodePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PromoCodePreviousValuesPromise>() => T;
}

export interface PromoCodeSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PromoCodeSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PromoCodeSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PromoCodePreviousValuesSubscription>() => T;
}

export interface PromoCodePreviousValues {
  id: ID_Output;
  code: String;
  valid: Boolean;
  type: VideoType;
  endDate?: String;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface PromoCodePreviousValuesPromise
  extends Promise<PromoCodePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  code: () => Promise<String>;
  valid: () => Promise<Boolean>;
  type: () => Promise<VideoType>;
  endDate: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface PromoCodePreviousValuesSubscription
  extends Promise<AsyncIterator<PromoCodePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  code: () => Promise<AsyncIterator<String>>;
  valid: () => Promise<AsyncIterator<Boolean>>;
  type: () => Promise<AsyncIterator<VideoType>>;
  endDate: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface PromoVideoSubscriptionPayload {
  mutation: MutationType;
  node: PromoVideo;
  updatedFields: String[];
  previousValues: PromoVideoPreviousValues;
}

export interface PromoVideoSubscriptionPayloadPromise
  extends Promise<PromoVideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PromoVideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PromoVideoPreviousValuesPromise>() => T;
}

export interface PromoVideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PromoVideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PromoVideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PromoVideoPreviousValuesSubscription>() => T;
}

export interface PromoVideoPreviousValues {
  id: ID_Output;
  link: String;
  title: String;
  description: String;
  image: String;
  placeholder?: String;
  familyId: String;
  banner: String;
  bannerMobile: String;
  type: VideoType;
}

export interface PromoVideoPreviousValuesPromise
  extends Promise<PromoVideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  link: () => Promise<String>;
  title: () => Promise<String>;
  description: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  familyId: () => Promise<String>;
  banner: () => Promise<String>;
  bannerMobile: () => Promise<String>;
  type: () => Promise<VideoType>;
}

export interface PromoVideoPreviousValuesSubscription
  extends Promise<AsyncIterator<PromoVideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  link: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
  familyId: () => Promise<AsyncIterator<String>>;
  banner: () => Promise<AsyncIterator<String>>;
  bannerMobile: () => Promise<AsyncIterator<String>>;
  type: () => Promise<AsyncIterator<VideoType>>;
}

export interface QuoteSubscriptionPayload {
  mutation: MutationType;
  node: Quote;
  updatedFields: String[];
  previousValues: QuotePreviousValues;
}

export interface QuoteSubscriptionPayloadPromise
  extends Promise<QuoteSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = QuotePromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = QuotePreviousValuesPromise>() => T;
}

export interface QuoteSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<QuoteSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = QuoteSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = QuotePreviousValuesSubscription>() => T;
}

export interface QuotePreviousValues {
  id: ID_Output;
  text: String;
  linkTo?: String;
}

export interface QuotePreviousValuesPromise
  extends Promise<QuotePreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  text: () => Promise<String>;
  linkTo: () => Promise<String>;
}

export interface QuotePreviousValuesSubscription
  extends Promise<AsyncIterator<QuotePreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  text: () => Promise<AsyncIterator<String>>;
  linkTo: () => Promise<AsyncIterator<String>>;
}

export interface SitePromoSubscriptionPayload {
  mutation: MutationType;
  node: SitePromo;
  updatedFields: String[];
  previousValues: SitePromoPreviousValues;
}

export interface SitePromoSubscriptionPayloadPromise
  extends Promise<SitePromoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = SitePromoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = SitePromoPreviousValuesPromise>() => T;
}

export interface SitePromoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<SitePromoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = SitePromoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = SitePromoPreviousValuesSubscription>() => T;
}

export interface SitePromoPreviousValues {
  id: ID_Output;
  type: VideoType;
  promoOffer: PromoOffer;
  startDate?: String;
  endDate?: String;
  title: String;
  subtitle: String;
  description: String;
  newPrice?: Float;
}

export interface SitePromoPreviousValuesPromise
  extends Promise<SitePromoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  type: () => Promise<VideoType>;
  promoOffer: () => Promise<PromoOffer>;
  startDate: () => Promise<String>;
  endDate: () => Promise<String>;
  title: () => Promise<String>;
  subtitle: () => Promise<String>;
  description: () => Promise<String>;
  newPrice: () => Promise<Float>;
}

export interface SitePromoPreviousValuesSubscription
  extends Promise<AsyncIterator<SitePromoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  type: () => Promise<AsyncIterator<VideoType>>;
  promoOffer: () => Promise<AsyncIterator<PromoOffer>>;
  startDate: () => Promise<AsyncIterator<String>>;
  endDate: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  subtitle: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  newPrice: () => Promise<AsyncIterator<Float>>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface UserPreviousValues {
  id: ID_Output;
  firstName?: String;
  lastName?: String;
  email?: String;
  password?: String;
  phone?: String;
  ips: String[];
  active: Boolean;
  subscribePromo: Boolean;
  subscribeEarlyAccess: Boolean;
  subscribeNews: Boolean;
  createdAt: DateTimeOutput;
  updatedAt: DateTimeOutput;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  firstName: () => Promise<String>;
  lastName: () => Promise<String>;
  email: () => Promise<String>;
  password: () => Promise<String>;
  phone: () => Promise<String>;
  ips: () => Promise<String[]>;
  active: () => Promise<Boolean>;
  subscribePromo: () => Promise<Boolean>;
  subscribeEarlyAccess: () => Promise<Boolean>;
  subscribeNews: () => Promise<Boolean>;
  createdAt: () => Promise<DateTimeOutput>;
  updatedAt: () => Promise<DateTimeOutput>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  firstName: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  phone: () => Promise<AsyncIterator<String>>;
  ips: () => Promise<AsyncIterator<String[]>>;
  active: () => Promise<AsyncIterator<Boolean>>;
  subscribePromo: () => Promise<AsyncIterator<Boolean>>;
  subscribeEarlyAccess: () => Promise<AsyncIterator<Boolean>>;
  subscribeNews: () => Promise<AsyncIterator<Boolean>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
}

export interface VideoSubscriptionPayload {
  mutation: MutationType;
  node: Video;
  updatedFields: String[];
  previousValues: VideoPreviousValues;
}

export interface VideoSubscriptionPayloadPromise
  extends Promise<VideoSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = VideoPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = VideoPreviousValuesPromise>() => T;
}

export interface VideoSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<VideoSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = VideoSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = VideoPreviousValuesSubscription>() => T;
}

export interface VideoPreviousValues {
  id: ID_Output;
  name?: String;
  keywords?: String;
  title?: String;
  link?: String;
  preview: String;
  image: String;
  placeholder: String;
  imageVertical?: String;
  placeholderVertical?: String;
  published: Boolean;
  price: Float;
  start: Int;
  type: VideoType;
  familyId?: String;
  suggest: Boolean;
  options: String[];
}

export interface VideoPreviousValuesPromise
  extends Promise<VideoPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  keywords: () => Promise<String>;
  title: () => Promise<String>;
  link: () => Promise<String>;
  preview: () => Promise<String>;
  image: () => Promise<String>;
  placeholder: () => Promise<String>;
  imageVertical: () => Promise<String>;
  placeholderVertical: () => Promise<String>;
  published: () => Promise<Boolean>;
  price: () => Promise<Float>;
  start: () => Promise<Int>;
  type: () => Promise<VideoType>;
  familyId: () => Promise<String>;
  suggest: () => Promise<Boolean>;
  options: () => Promise<String[]>;
}

export interface VideoPreviousValuesSubscription
  extends Promise<AsyncIterator<VideoPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  keywords: () => Promise<AsyncIterator<String>>;
  title: () => Promise<AsyncIterator<String>>;
  link: () => Promise<AsyncIterator<String>>;
  preview: () => Promise<AsyncIterator<String>>;
  image: () => Promise<AsyncIterator<String>>;
  placeholder: () => Promise<AsyncIterator<String>>;
  imageVertical: () => Promise<AsyncIterator<String>>;
  placeholderVertical: () => Promise<AsyncIterator<String>>;
  published: () => Promise<AsyncIterator<Boolean>>;
  price: () => Promise<AsyncIterator<Float>>;
  start: () => Promise<AsyncIterator<Int>>;
  type: () => Promise<AsyncIterator<VideoType>>;
  familyId: () => Promise<AsyncIterator<String>>;
  suggest: () => Promise<AsyncIterator<Boolean>>;
  options: () => Promise<AsyncIterator<String[]>>;
}

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `Float` scalar type represents signed double-precision fractional values as specified by [IEEE 754](https://en.wikipedia.org/wiki/IEEE_floating_point). 
*/
export type Float = number;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1. 
*/
export type Int = number;

export type Long = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Video",
    embedded: false
  },
  {
    name: "PromoVideo",
    embedded: false
  },
  {
    name: "PromoCode",
    embedded: false
  },
  {
    name: "SitePromo",
    embedded: false
  },
  {
    name: "Product",
    embedded: false
  },
  {
    name: "Order",
    embedded: false
  },
  {
    name: "Quote",
    embedded: false
  },
  {
    name: "VideoType",
    embedded: false
  },
  {
    name: "PromoOffer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
